1. Установим  Hashicorp Vault 

root@vagrant:~# curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
root@vagrant:~# sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
root@vagrant:~# sudo apt-get update && sudo apt-get install vault
	
Проверяем установку:
root@vagrant:~# vault
Usage: vault <command> [args]

Common commands:
    read        Read data and retrieves secrets
    write       Write data, configuration, and secrets
    delete      Delete secrets and configuration
    list        List data or secrets
    login       Authenticate locally
    agent       Start a Vault agent
    server      Start a Vault server
    status      Print seal and HA status
    unwrap      Unwrap a wrapped secret

Other commands:
    audit          Interact with audit devices
    auth           Interact with auth methods
    debug          Runs the debug command
    kv             Interact with Vault's Key-Value storage
    lease          Interact with leases
    monitor        Stream log messages from a Vault server
    namespace      Interact with namespaces
    operator       Perform operator-specific tasks
    path-help      Retrieve API help for paths
    plugin         Interact with Vault plugins and catalog
    policy         Interact with policies
    print          Prints runtime configurations
    secrets        Interact with secrets engines
    ssh            Initiate an SSH session
    token          Interact with tokens

		
2. Запуск сервера

root@vagrant:~# vault server -dev -dev-listen-address="0.0.0.0:8200"
==> Vault server configuration:

             Api Address: http://0.0.0.0:8200
                     Cgo: disabled
         Cluster Address: https://0.0.0.0:8201
              Go Version: go1.15.11
              Listener 1: tcp (addr: "0.0.0.0:8200", cluster address: "0.0.0.0:8201", max_request_duration: "1m30s", max_request_size: "33554432", tls: "disabled")
               Log Level: info
                   Mlock: supported: true, enabled: false
           Recovery Mode: false
                 Storage: inmem
                 Version: Vault v1.7.1
             Version Sha: 917142287996a005cb1ed9d96d00d06a0590e44e

==> Vault server started! Log data will stream in below:

2021-05-07T05:43:06.661Z [INFO]  proxy environment: http_proxy= https_proxy= no_proxy=
2021-05-07T05:43:06.661Z [WARN]  no `api_addr` value specified in config or in VAULT_API_ADDR; falling back to detection if possible, but this value should be manually set
2021-05-07T05:43:06.663Z [INFO]  core: security barrier not initialized
2021-05-07T05:43:06.663Z [INFO]  core: security barrier initialized: stored=1 shares=1 threshold=1
2021-05-07T05:43:06.663Z [INFO]  core: post-unseal setup starting
2021-05-07T05:43:06.680Z [INFO]  core: loaded wrapping token key
2021-05-07T05:43:06.680Z [INFO]  core: successfully setup plugin catalog: plugin-directory=
2021-05-07T05:43:06.680Z [INFO]  core: no mounts; adding default mount table
2021-05-07T05:43:06.682Z [INFO]  core: successfully mounted backend: type=cubbyhole path=cubbyhole/
2021-05-07T05:43:06.682Z [INFO]  core: successfully mounted backend: type=system path=sys/
2021-05-07T05:43:06.682Z [INFO]  core: successfully mounted backend: type=identity path=identity/
2021-05-07T05:43:06.684Z [INFO]  core: successfully enabled credential backend: type=token path=token/
2021-05-07T05:43:06.685Z [INFO]  core: restoring leases
2021-05-07T05:43:06.686Z [INFO]  rollback: starting rollback manager
2021-05-07T05:43:06.687Z [INFO]  expiration: lease restore complete
2021-05-07T05:43:06.687Z [INFO]  identity: entities restored
2021-05-07T05:43:06.687Z [INFO]  identity: groups restored
2021-05-07T05:43:06.687Z [INFO]  core: post-unseal setup complete
2021-05-07T05:43:06.688Z [INFO]  core: root token generated
2021-05-07T05:43:06.688Z [INFO]  core: pre-seal teardown starting
2021-05-07T05:43:06.688Z [INFO]  rollback: stopping rollback manager
2021-05-07T05:43:06.689Z [INFO]  core: pre-seal teardown complete
2021-05-07T05:43:06.689Z [INFO]  core.cluster-listener.tcp: starting listener: listener_address=0.0.0.0:8201
2021-05-07T05:43:06.691Z [INFO]  core.cluster-listener: serving cluster requests: cluster_listen_address=[::]:8201
2021-05-07T05:43:06.692Z [INFO]  core: post-unseal setup starting
2021-05-07T05:43:06.692Z [INFO]  core: loaded wrapping token key
2021-05-07T05:43:06.692Z [INFO]  core: successfully setup plugin catalog: plugin-directory=
2021-05-07T05:43:06.693Z [INFO]  core: successfully mounted backend: type=system path=sys/
2021-05-07T05:43:06.693Z [INFO]  core: successfully mounted backend: type=identity path=identity/
2021-05-07T05:43:06.693Z [INFO]  core: successfully mounted backend: type=cubbyhole path=cubbyhole/
2021-05-07T05:43:06.694Z [INFO]  core: successfully enabled credential backend: type=token path=token/
2021-05-07T05:43:06.695Z [INFO]  core: restoring leases
2021-05-07T05:43:06.698Z [INFO]  expiration: lease restore complete
2021-05-07T05:43:06.698Z [INFO]  identity: entities restored
2021-05-07T05:43:06.698Z [INFO]  identity: groups restored
2021-05-07T05:43:06.698Z [INFO]  core: post-unseal setup complete
2021-05-07T05:43:06.698Z [INFO]  core: vault is unsealed
2021-05-07T05:43:06.700Z [INFO]  core: successful mount: namespace= path=secret/ type=kv
2021-05-07T05:43:06.704Z [INFO]  secrets.kv.kv_bb5aeff9: collecting keys to upgrade
2021-05-07T05:43:06.704Z [INFO]  secrets.kv.kv_bb5aeff9: done collecting keys: num_keys=1
2021-05-07T05:43:06.704Z [INFO]  secrets.kv.kv_bb5aeff9: upgrading keys finished
2021-05-07T05:43:06.705Z [INFO]  rollback: starting rollback manager
WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory
and starts unsealed with a single unseal key. The root token is already
authenticated to the CLI, so you can immediately begin using Vault.

You may need to set the following environment variable:

    $ export VAULT_ADDR='http://0.0.0.0:8200'

The unseal key and root token are displayed below in case you want to
seal/unseal the Vault or re-authenticate.


3. Создаем ROOT CA
root@vagrant:~# vault secrets enable pki
Success! Enabled the pki secrets engine at: pki/
root@vagrant:~# vault secrets tune -max-lease-ttl=87600h pki
Success! Tuned the secrets engine at: pki/
root@vagrant:~# vault write -field=certificate pki/root/generate/internal \
>         common_name="example.com" \
>         ttl=87600h > CA_cert.crt
root@vagrant:~# 
root@vagrant:~# vault write pki/config/urls         issuing_certificates="http://127.0.0.1:8200/v1/pki/ca"         crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"
Success! Data written to: pki/config/urls


Создаем промежуточный CA
root@vagrant:~# vault secrets enable -path=pki_int pki
Success! Enabled the pki secrets engine at: pki_int/
root@vagrant:~# vault secrets tune -max-lease-ttl=43800h pki_int
Success! Tuned the secrets engine at: pki_int/
root@vagrant:~# vault write -format=json pki_int/intermediate/generate/internal \
>         common_name="example.com Intermediate Authority" \
>         | jq -r '.data.csr' > pki_intermediate.csr

root@vagrant:~# vault write -format=json pki/root/sign-intermediate csr=@pki_intermediate.csr \
>         format=pem_bundle ttl="43800h" \
>         | jq -r '.data.certificate' > intermediate.cert.pem
root@vagrant:~# 
root@vagrant:~# 
root@vagrant:~# vault write pki_int/intermediate/set-signed certificate=@intermediate.cert.pem
Success! Data written to: pki_int/intermediate/set-signed
root@vagrant:~# 


Добавляем роль, для дальнейшего выпуска сертификатов
root@vagrant:~# vault write pki_int/roles/example-dot-com \
>         allowed_domains="example.com" \
>         allow_subdomains=true \
>         max_ttl="720h"
Success! Data written to: pki_int/roles/example-dot-com



4. Делаем сертификат для netology.example.com
root@vagrant:~# vault write pki_int/issue/example-dot-com common_name="netology.example.com" ttl="24h"
Key                 Value
---                 -----
ca_chain            [-----BEGIN CERTIFICATE-----
MIIDpjCCAo6gAwIBAgIUaewcclKvmdB3DX4yHnVTARmGi7gwDQYJKoZIhvcNAQEL
BQAwFjEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMjEwNTA3MDYwNTMyWhcNMjYw
NTA2MDYwNjAyWjAtMSswKQYDVQQDEyJleGFtcGxlLmNvbSBJbnRlcm1lZGlhdGUg
QXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAweR0roTf
B2Ue57AQn4dOFwLKTPYzqStL//xp8CeJ5wQgBANmjB53a1Ua6o2vV3o85RBgPb2X
Hrp6tNC/XNbeC1p2/PQ87YJS3Xdtx7NzbPtJdKnhGyG9z7xjnfEuqyH+T2RW9dCH
wmR3/EmABeRmvvr50qhJOvyqAlI7zqPD2NGQ4oIvKa/cwDgy8nIJoKi0EtwvxC4T
8NFzrEdvPcjxs9WqZM6ULxr9VvPgWAlKQAUbxUyMEtb9rhyga9wC+CvDDIw5JLgT
ZyBBZcrNpQSk8PgGDw0nmuSYPQGcea1H0VFfTvehjQlqEYLkc8TrO8pmgTz/aqIh
gYgID6Po+gSY6QIDAQABo4HUMIHRMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
BTADAQH/MB0GA1UdDgQWBBQ5GR/4SJaaL4muYAVg8Pex9Q8kkzAfBgNVHSMEGDAW
gBTGOJuRLE0h4n6MvSmP79LyI5LI6DA7BggrBgEFBQcBAQQvMC0wKwYIKwYBBQUH
MAKGH2h0dHA6Ly8xMjcuMC4wLjE6ODIwMC92MS9wa2kvY2EwMQYDVR0fBCowKDAm
oCSgIoYgaHR0cDovLzEyNy4wLjAuMTo4MjAwL3YxL3BraS9jcmwwDQYJKoZIhvcN
AQELBQADggEBAK3Mffp6FI/eQ9u/PP2iu6K/VNyOkdGkMJa4e+DN/Qdt2qZ7ecbB
2MvtX12nBnmeoKVCj/D8f4gGCaSivXz1k/V/H9RnAmc+oYlL80OoBzswr36XVK+J
UOtwX9/09XUNjiyyTA5lMxOK83Pyi9ugiHLHq6tswz1zHR29bLIJLIl7KzUhprmq
MaHc2PoVwGV/NFRJwmMsxAEitFTsMQ5iI68pGRrRkAF1SaD0Z5jw6FqMiBSbzHVR
jZos/JmbPI0eLr98wKtkt28VUT6Xh0DU/KpLiZVnxxH6c9N+/RruNp5kvRYki8IQ
k2k8hjxkJlW8mlL57+vdFQWXjbo7rXra03o=
-----END CERTIFICATE-----]
certificate         -----BEGIN CERTIFICATE-----
MIIDbjCCAlagAwIBAgIUDSl2Y2NJLr03dBPt5eQBK5FOZK8wDQYJKoZIhvcNAQEL
BQAwLTErMCkGA1UEAxMiZXhhbXBsZS5jb20gSW50ZXJtZWRpYXRlIEF1dGhvcml0
eTAeFw0yMTA1MDcwNjEwMDJaFw0yMTA1MDgwNjEwMzJaMB8xHTAbBgNVBAMTFG5l
dG9sb2d5LmV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
AQEArVwhJAUlAgxac27B7IsTLbBy/Zdo7GrwkpGvBbthqCiSyQzL8AOosCzaNujZ
eujaR2YwIZNUMiseEAlFFIXQ+kTE8t7OGpsQmYsTDqvLLBSTAFuv3KKaaPpIfyS4
qzUzfeXH0R6LfRIF9WJLXGMoTPhOGAAPkIWfi0HprVq4EmMFlKZF0OCp0vbXHJPv
185Ka89TTsq2wD+DBoms8fd3ayMsq7k+kYV4xYtNgPAHpgajRCFkiVJoOxjTO55E
Kdf6R3CYxcI+fNdHRM0yj3eLUddi9jXD/XfIB2FzMA8Qs41iwEmTuyll3OD0NOE5
+fqit85B67Ikb5hTuVwz8uSy3wIDAQABo4GTMIGQMA4GA1UdDwEB/wQEAwIDqDAd
BgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHQYDVR0OBBYEFCfOuiJWXktw
zniKqH5hj6ZrrMcoMB8GA1UdIwQYMBaAFDkZH/hIlpovia5gBWDw97H1DySTMB8G
A1UdEQQYMBaCFG5ldG9sb2d5LmV4YW1wbGUuY29tMA0GCSqGSIb3DQEBCwUAA4IB
AQBddo2l++yEYnlkR/JWjQtZnTruOw8PZwWhCNRDR87XYJmSqORnrLawv8FmlqPa
3tzls3BCBh948BFWnl8l6bpOQ+ssurSZSqDRTyaVHioPaHMDSFvYkC/oxC2G+UL1
ltE7tKJ0c49YknBOIGgmKaFGBanjk+B4DoXf8r/TMP4t0FKHhEBVDWJrjzD8vC1K
isx57XZpzcm/nNr2AU/RzXtKpfYzBzFRgJWK+uV0E1XNNeGU5EuismqMYFZALqd8
t2Y9F3fYIJbqSIvdxOpPMiqFDAuetluKBo9bN74tjl00KARyVSy/k58ZrNTIUIFz
41eyf55dM8JYm9Bg8De8Koap
-----END CERTIFICATE-----
expiration          1620454232
issuing_ca          -----BEGIN CERTIFICATE-----
MIIDpjCCAo6gAwIBAgIUaewcclKvmdB3DX4yHnVTARmGi7gwDQYJKoZIhvcNAQEL
BQAwFjEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMjEwNTA3MDYwNTMyWhcNMjYw
NTA2MDYwNjAyWjAtMSswKQYDVQQDEyJleGFtcGxlLmNvbSBJbnRlcm1lZGlhdGUg
QXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAweR0roTf
B2Ue57AQn4dOFwLKTPYzqStL//xp8CeJ5wQgBANmjB53a1Ua6o2vV3o85RBgPb2X
Hrp6tNC/XNbeC1p2/PQ87YJS3Xdtx7NzbPtJdKnhGyG9z7xjnfEuqyH+T2RW9dCH
wmR3/EmABeRmvvr50qhJOvyqAlI7zqPD2NGQ4oIvKa/cwDgy8nIJoKi0EtwvxC4T
8NFzrEdvPcjxs9WqZM6ULxr9VvPgWAlKQAUbxUyMEtb9rhyga9wC+CvDDIw5JLgT
ZyBBZcrNpQSk8PgGDw0nmuSYPQGcea1H0VFfTvehjQlqEYLkc8TrO8pmgTz/aqIh
gYgID6Po+gSY6QIDAQABo4HUMIHRMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
BTADAQH/MB0GA1UdDgQWBBQ5GR/4SJaaL4muYAVg8Pex9Q8kkzAfBgNVHSMEGDAW
gBTGOJuRLE0h4n6MvSmP79LyI5LI6DA7BggrBgEFBQcBAQQvMC0wKwYIKwYBBQUH
MAKGH2h0dHA6Ly8xMjcuMC4wLjE6ODIwMC92MS9wa2kvY2EwMQYDVR0fBCowKDAm
oCSgIoYgaHR0cDovLzEyNy4wLjAuMTo4MjAwL3YxL3BraS9jcmwwDQYJKoZIhvcN
AQELBQADggEBAK3Mffp6FI/eQ9u/PP2iu6K/VNyOkdGkMJa4e+DN/Qdt2qZ7ecbB
2MvtX12nBnmeoKVCj/D8f4gGCaSivXz1k/V/H9RnAmc+oYlL80OoBzswr36XVK+J
UOtwX9/09XUNjiyyTA5lMxOK83Pyi9ugiHLHq6tswz1zHR29bLIJLIl7KzUhprmq
MaHc2PoVwGV/NFRJwmMsxAEitFTsMQ5iI68pGRrRkAF1SaD0Z5jw6FqMiBSbzHVR
jZos/JmbPI0eLr98wKtkt28VUT6Xh0DU/KpLiZVnxxH6c9N+/RruNp5kvRYki8IQ
k2k8hjxkJlW8mlL57+vdFQWXjbo7rXra03o=
-----END CERTIFICATE-----
private_key         -----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEArVwhJAUlAgxac27B7IsTLbBy/Zdo7GrwkpGvBbthqCiSyQzL
8AOosCzaNujZeujaR2YwIZNUMiseEAlFFIXQ+kTE8t7OGpsQmYsTDqvLLBSTAFuv
3KKaaPpIfyS4qzUzfeXH0R6LfRIF9WJLXGMoTPhOGAAPkIWfi0HprVq4EmMFlKZF
0OCp0vbXHJPv185Ka89TTsq2wD+DBoms8fd3ayMsq7k+kYV4xYtNgPAHpgajRCFk
iVJoOxjTO55EKdf6R3CYxcI+fNdHRM0yj3eLUddi9jXD/XfIB2FzMA8Qs41iwEmT
uyll3OD0NOE5+fqit85B67Ikb5hTuVwz8uSy3wIDAQABAoIBAAJVRRTpBNB8PhNj
oDSAwqdQwptrGDxmTAqM72ASX4QV17Pg+jWmtvR4Bg/LHnIrBBUF6Qvqoa1zKxpo
JYfbLS7REh16pidxgs2uM3l1EmzrcfcFRN6hSZa0F5muctXLB4BgQUotMQ9j2LSu
t/jsVLSEeviTt6HoSndjUbPFjsigitmoJarSbD9xTRnqv2P1VNksM3630DhyuqgF
xQTpgopi80N2KX4JogLtnKGRWa9TKuOE7xQp3iqhHNcUX1r3Ylgx0kr0fibnr/FU
Kd3HE0PmXuAqeax46cwYxP5haq6/IRqpbCmT5BItKs6lOx16G0eRMQkajSPaKn/H
PjDB2JECgYEAxLdkPJ5PCQlLVuQu6i5B7bkxN485l+zfB7Uo3OT2YhAvoGz0MTNT
bY9zvNXhio6S5bnwmJmR23CNpCz4+vWNhj8uBeqJYqjuUK7InZ6cnS1prWkFqUqc
Eg2tlqf3r/eIzTNvDT+DmHk/I0NnYAAufmrl3sgzCw72NStwyI5KC/MCgYEA4ZrK
pjtADDgYeg/NtoJyAWnAKf52JSKhLVAX8q7PUcHY8ksgfoHcHZ/aKP87/AZex8oY
0pWABM9lmvllTgpHwDMrNlTmG0blO/Nyh5s/omT4OStFoRlvqOlIu7CbbEwJRYCC
oXnkBIRcc4mOPQkdxcYYZMthbEWNHpIO1skFFGUCgYBHbeQa0s0WFebibUbPx+4u
mOFTMFGUZfFyRgjJdOY2I3R3xzhAKUfw73byKaOVAUI74nGHp7O7v7ne1GmwDrvN
9GEMyuYKChdG+sBj43Uw6Y2G5yykFTBoqcjPfLxGjBaDlFqNr/NjyRrw/geqZ0Z6
puxDIeTO7ibelaCFYo1mmwKBgEVeKgdY2oWnTediKpd+nn1OvdZrtnoOns5m/SYS
mA6Ecyd08CXV2g+F0jee2xvP/Z6ixmUhsL5J4uz22C5ZvNwdH6FSE3q5nsyDO2j0
1GkjcKtrYbp6LroaGNIVKITxEDy9mez6pKC67g5cck7UGcJw+Zksa+U1sYF/2W4z
Wwt9AoGABmlGU1l07RXRJm1nshu0xVF1jb/7qliKyDmTCFMbIocV02PEp0z8j0l5
AeQJv68Bx41CBhPBnJWswEvIXVBTsvYHpvsXGrsaaUfWkTqELlHkfUigeSyWRpRi
0+rAc1+DaF01NK26UGw0kVl2piZ0cZ8YidwJAFhZJMaHNRpld3c=
-----END RSA PRIVATE KEY-----
private_key_type    rsa
serial_number       0d:29:76:63:63:49:2e:bd:37:74:13:ed:e5:e4:01:2b:91:4e:64:af
root@vagrant:~# 


Сохраним вывод команды:

certificate в netology.pem
private_key в netology_key.key

Данные issuing_ca и ca_chain, я понимаю это public_key ROOT CA и Intermediate CA. 


5. Поднимаем сервер nginx 
root@vagrant:~# apt-get install -y nginx

Настроил конфиг
root@vagrant:~# cat /etc/nginx/sites-enabled/default 
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	ssl_certificate /root/netology.pem;
	ssl_certificate_key /root/netology_key.key;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
root@vagrant:~# 

root@vagrant:~# systemctl status nginx
? nginx.service - A high performance web server and a reverse proxy server
     Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
     Active: active (running) since Fri 2021-05-07 06:34:25 UTC; 6min ago
       Docs: man:nginx(8)
    Process: 15287 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
    Process: 15299 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
   Main PID: 15300 (nginx)
      Tasks: 2 (limit: 1074)
     Memory: 2.7M
     CGroup: /system.slice/nginx.service
             +-15300 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
             L-15301 nginx: worker process

May 07 06:34:25 vagrant systemd[1]: Starting A high performance web server and a reverse proxy server...
May 07 06:34:25 vagrant systemd[1]: Started A high performance web server and a reverse proxy server.
root@vagrant:~# 


6. Добавляем netology.example.com в hosts
root@vagrant:~# echo 127.0.0.1 netology.example.com >> /etc/hosts
root@vagrant:~# host netology.example.com
netology.example.com has address 127.0.0.1

Проверяем запросом
root@vagrant:~# curl -I https://netology.example.com
curl: (60) SSL certificate problem: unable to get local issuer certificate
More details here: https://curl.haxx.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.
root@vagrant:~# 

Нужно добавить наш Intermediate CA в доверенные сертификаты
root@vagrant:~# ln -s /root/intermediate.cert.pem /usr/local/share/ca-certificates/intermediate.cert.crt
root@vagrant:~# update-ca-certificates
Updating certificates in /etc/ssl/certs...
1 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d...
done.


Проверям снова
root@vagrant:~# curl -I https://netology.example.com
HTTP/1.1 200 OK
Server: nginx/1.18.0 (Ubuntu)
Date: Fri, 07 May 2021 06:43:42 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Fri, 07 May 2021 06:20:57 GMT
Connection: keep-alive
ETag: "6094dc49-264"
Accept-Ranges: bytes

root@vagrant:~# for i in {1..10}; do curl -I -s https://netology.example.com | grep HTTP; done 
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
HTTP/1.1 200 OK
root@vagrant:~# 


Все работает


7. Ознакомился с протоколом ACME и CA Let's encrypt. Почитал инструкцию по получению сертификата через certbot. К сожалению у меня нет доменного имени для тестов. 
	В скором времени приму в управление сайт на работе, обязательно попробую заменить там платный сертификат.







